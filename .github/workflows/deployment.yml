# GitHub Actions Workflow: Github Actions 대시보드에서 이름으료 표기됨
name: Deploy Next.js to S3 and invalidate CloudFront

# 워크플로우 트리거 설정
# 이 워크플로우는 main 브랜치에 푸시될 때마다 실행됩니다.
# 또한 수동으로 실행할 수 있도록 workflow_dispatch 이벤트도 설정합니다.
on:
  push:
    branches:
      - main  # 또는 master, 프로젝트의 기본 브랜치 이름에 맞게 조정
  workflow_dispatch:

# 워크플로우 실행 환경 설정
# 이 워크플로우는 Ubuntu 최신 버전에서 실행됩니다.
jobs:
  deploy:
    runs-on: ubuntu-latest

    # 워크플로우 실행에 필요한 환경 변수 설정
    # 현재 repository의 코드로 checkout하고, commit 된 코드 전체를 내려받습니다.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 의존성 설치
      # package-lock.json 파일을 기준으로 빠르고 재현 가능하게 설치
      - name: Install dependencies
        run: npm ci

      # 빌드 실행
      # out/ 디렉토리에 빌드 결과물을 생성합니다.
      - name: Build
        run: npm run build

      # AWS CLI 실행을 위한 자격 증명 설정
      # GitHub Secrets에 저장된 AWS 자격 증명을 사용합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # S3에 빌드 결과물을 업로드
      # --delete 옵션을 활용하여 S3 버킷의 기존 파일을 삭제하고 완전한 동기화를 유지합니다.
      - name: Deploy to S3
        run: |
          aws s3 sync out/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

      # CloudFront는 한 번 캐시한 파일을 자동으로 갱신하지 않습니다.
      # S3의 파일이 변경되어도 이전 버전을 계속 서빙할 수 있습니다.
      # 이 명령어는 모든 경로("/*")에 대해 캐시를 무효화하여,
      # 다음 요청 시 S3의 최신 파일을 다시 가져오도록 합니다.
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"